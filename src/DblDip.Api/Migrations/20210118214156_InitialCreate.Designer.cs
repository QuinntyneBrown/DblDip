// <auto-generated />
using System;
using DblDip.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DblDip.Api.Migrations
{
    [DbContext(typeof(DblDipDbContext))]
    [Migration("20210118214156_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("DblDip.Core.Models.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DefaultProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DblDip.Core.Models.Availability", b =>
                {
                    b.Property<Guid>("AvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.HasKey("AvailabilityId");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("DblDip.Core.Models.Blog", b =>
                {
                    b.Property<Guid>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlogId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("DblDip.Core.Models.Board", b =>
                {
                    b.Property<Guid>("BoardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BoardId");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("DblDip.Core.Models.Brand", b =>
                {
                    b.Property<Guid>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LogoDigitalAssetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("DblDip.Core.Models.Card", b =>
                {
                    b.Property<Guid>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CardId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("DblDip.Core.Models.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LogoDigitalAssetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("DblDip.Core.Models.Consultation", b =>
                {
                    b.Property<Guid>("ConsultationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Completed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Paid")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecipientPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConsultationId");

                    b.ToTable("Consultations");
                });

            modelBuilder.Entity("DblDip.Core.Models.Contact", b =>
                {
                    b.Property<Guid>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("DblDip.Core.Models.Conversation", b =>
                {
                    b.Property<Guid>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.HasKey("ConversationId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("DblDip.Core.Models.Dashboard", b =>
                {
                    b.Property<Guid>("DashboardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DashboardId");

                    b.ToTable("Dashboards");
                });

            modelBuilder.Entity("DblDip.Core.Models.DigitalAsset", b =>
                {
                    b.Property<Guid>("DigitalAssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Bytes")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DigitalAssetId");

                    b.ToTable("DigitalAssets");
                });

            modelBuilder.Entity("DblDip.Core.Models.Discount", b =>
                {
                    b.Property<Guid>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.HasKey("DiscountId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("DblDip.Core.Models.Epic", b =>
                {
                    b.Property<Guid>("EpicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EpicId");

                    b.ToTable("Epics");
                });

            modelBuilder.Entity("DblDip.Core.Models.Equipment", b =>
                {
                    b.Property<Guid>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReceiptDigitalAssetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EquipmentId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("DblDip.Core.Models.Expense", b =>
                {
                    b.Property<Guid>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExpenseId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("DblDip.Core.Models.Feedback", b =>
                {
                    b.Property<Guid>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeedbackId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("DblDip.Core.Models.Invoice", b =>
                {
                    b.Property<Guid>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.HasKey("InvoiceId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("DblDip.Core.Models.Library", b =>
                {
                    b.Property<Guid>("LibraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PhotographerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LibraryId");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("DblDip.Core.Models.Meeting", b =>
                {
                    b.Property<Guid>("MeetingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeetingId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("DblDip.Core.Models.Message", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FromProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ToProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MessageId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DblDip.Core.Models.Offer", b =>
                {
                    b.Property<Guid>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OfferId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("DblDip.Core.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DblDip.Core.Models.Participant", b =>
                {
                    b.Property<Guid>("ParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.HasKey("ParticipantId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("DblDip.Core.Models.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DblDip.Core.Models.PaymentSchedule", b =>
                {
                    b.Property<Guid>("PaymentScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentScheduleId");

                    b.ToTable("PaymentSchedules");
                });

            modelBuilder.Entity("DblDip.Core.Models.PhotoGallery", b =>
                {
                    b.Property<Guid>("PhotoGalleryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoverPhotoDigitalAssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PhotographerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.HasKey("PhotoGalleryId");

                    b.ToTable("PhotoGalleries");
                });

            modelBuilder.Entity("DblDip.Core.Models.PhotoStudio", b =>
                {
                    b.Property<Guid>("PhotoStudioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhotoStudioId");

                    b.ToTable("PhotoStudios");
                });

            modelBuilder.Entity("DblDip.Core.Models.PhotographyProject", b =>
                {
                    b.Property<Guid>("PhotographyProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdditionalParticipantIds")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("GallerySent")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PhotographerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VendorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PhotographyProjectId");

                    b.ToTable("PhotographyProjects");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PhotographyProject");
                });

            modelBuilder.Entity("DblDip.Core.Models.Point", b =>
                {
                    b.Property<Guid>("PointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.HasKey("PointId");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("DblDip.Core.Models.Post", b =>
                {
                    b.Property<Guid>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("DblDip.Core.Models.Profile", b =>
                {
                    b.Property<Guid>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AvatarDigitalAssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DefaultDashboardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DotNetType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProfileId");

                    b.ToTable("Profiles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Profile");
                });

            modelBuilder.Entity("DblDip.Core.Models.Questionnaire", b =>
                {
                    b.Property<Guid>("QuestionnaireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.HasKey("QuestionnaireId");

                    b.ToTable("Questionnaires");
                });

            modelBuilder.Entity("DblDip.Core.Models.Quote", b =>
                {
                    b.Property<Guid>("QuoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Accepted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Completed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Declined")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuoteId");

                    b.ToTable("Quotes");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Quote");
                });

            modelBuilder.Entity("DblDip.Core.Models.Rate", b =>
                {
                    b.Property<Guid>("RateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RateId");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("DblDip.Core.Models.Receipt", b =>
                {
                    b.Property<Guid>("ReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DigitalAssetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReceiptId");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("DblDip.Core.Models.Referral", b =>
                {
                    b.Property<Guid>("ReferralId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.HasKey("ReferralId");

                    b.ToTable("Referrals");
                });

            modelBuilder.Entity("DblDip.Core.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DblDip.Core.Models.Service", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DigitalAssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceId");

                    b.ToTable("Services");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Service");
                });

            modelBuilder.Entity("DblDip.Core.Models.ShotList", b =>
                {
                    b.Property<Guid>("ShotListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhotographyProject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShotListId");

                    b.ToTable("ShotLists");
                });

            modelBuilder.Entity("DblDip.Core.Models.Story", b =>
                {
                    b.Property<Guid>("StoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Completed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Started")
                        .HasColumnType("datetime2");

                    b.HasKey("StoryId");

                    b.ToTable("Stories");
                });

            modelBuilder.Entity("DblDip.Core.Models.Survey", b =>
                {
                    b.Property<Guid>("SurveyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SurveyId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("DblDip.Core.Models.SystemLocation", b =>
                {
                    b.Property<Guid>("SystemLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SystemLocationId");

                    b.ToTable("SystemLocations");
                });

            modelBuilder.Entity("DblDip.Core.Models.Task", b =>
                {
                    b.Property<Guid>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Completed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TaskId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("DblDip.Core.Models.Testimonial", b =>
                {
                    b.Property<Guid>("TestimonialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PhotographerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TestimonialId");

                    b.ToTable("Testimonials");
                });

            modelBuilder.Entity("DblDip.Core.Models.Ticket", b =>
                {
                    b.Property<Guid>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcceptanceCriteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EpicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TicketId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("DblDip.Core.Models.TimeEntry", b =>
                {
                    b.Property<Guid>("TimeEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Billable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Completed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TimeEntryId");

                    b.ToTable("TimeEntries");
                });

            modelBuilder.Entity("DblDip.Core.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PasswordResetRequired")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DblDip.Core.Models.Venue", b =>
                {
                    b.Property<Guid>("VenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VenueId");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("DblDip.Core.Models.YouTubeVideo", b =>
                {
                    b.Property<Guid>("YouTubeVideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NativeYouTubeVideoId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("YouTubeVideoId");

                    b.ToTable("YouTubeVideos");
                });

            modelBuilder.Entity("DblDip.Core.Models.CorporateEvent", b =>
                {
                    b.HasBaseType("DblDip.Core.Models.PhotographyProject");

                    b.Property<Guid>("CorporateEventId")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("CorporateEvent");
                });

            modelBuilder.Entity("DblDip.Core.Models.FamilyPortrait", b =>
                {
                    b.HasBaseType("DblDip.Core.Models.PhotographyProject");

                    b.Property<Guid>("FamilyPortraitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("FamilyPortrait");
                });

            modelBuilder.Entity("DblDip.Core.Models.Portrait", b =>
                {
                    b.HasBaseType("DblDip.Core.Models.PhotographyProject");

                    b.Property<Guid>("PortraitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("Portrait");
                });

            modelBuilder.Entity("DblDip.Core.Models.SocialEvent", b =>
                {
                    b.HasBaseType("DblDip.Core.Models.PhotographyProject");

                    b.Property<Guid>("SocialEventId")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("SocialEvent");
                });

            modelBuilder.Entity("DblDip.Core.Models.StudioPortrait", b =>
                {
                    b.HasBaseType("DblDip.Core.Models.PhotographyProject");

                    b.Property<Guid>("StudioPortraitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("StudioPortrait");
                });

            modelBuilder.Entity("DblDip.Core.Models.Wedding", b =>
                {
                    b.HasBaseType("DblDip.Core.Models.PhotographyProject");

                    b.Property<Guid>("WeddingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("Wedding");
                });

            modelBuilder.Entity("DblDip.Core.Models.Client", b =>
                {
                    b.HasBaseType("DblDip.Core.Models.Profile");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("DblDip.Core.Models.Lead", b =>
                {
                    b.HasBaseType("DblDip.Core.Models.Profile");

                    b.Property<Guid>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Lead");
                });

            modelBuilder.Entity("DblDip.Core.Models.Photographer", b =>
                {
                    b.HasBaseType("DblDip.Core.Models.Profile");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PhotographerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("Photographer");
                });

            modelBuilder.Entity("DblDip.Core.Models.ProjectManager", b =>
                {
                    b.HasBaseType("DblDip.Core.Models.Profile");

                    b.Property<Guid>("ProjectManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("ProjectManager");
                });

            modelBuilder.Entity("DblDip.Core.Models.SystemAdministrator", b =>
                {
                    b.HasBaseType("DblDip.Core.Models.Profile");

                    b.Property<Guid>("SystemAdministratorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("SystemAdministrator");
                });

            modelBuilder.Entity("DblDip.Core.Models.WeddingQuote", b =>
                {
                    b.HasBaseType("DblDip.Core.Models.Quote");

                    b.Property<Guid>("WeddingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WeddingQuoteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("WeddingQuote");
                });

            modelBuilder.Entity("DblDip.Core.Models.EditedPhoto", b =>
                {
                    b.HasBaseType("DblDip.Core.Models.Service");

                    b.Property<Guid>("EditedPhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("EditedPhoto");
                });

            modelBuilder.Entity("DblDip.Core.Models.Engagement", b =>
                {
                    b.HasBaseType("DblDip.Core.Models.Service");

                    b.Property<Guid>("EngagementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("Engagement");
                });

            modelBuilder.Entity("DblDip.Core.Models.Account", b =>
                {
                    b.OwnsMany("DblDip.Core.Models.ProfileReference", "Profiles", b1 =>
                        {
                            b1.Property<Guid>("AccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("AccountId", "Id");

                            b1.ToTable("ProfileReference");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("DblDip.Core.Models.Blog", b =>
                {
                    b.OwnsMany("DblDip.Core.Models.PostReference", "Posts", b1 =>
                        {
                            b1.Property<Guid>("BlogId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<Guid>("PostId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("BlogId", "Id");

                            b1.ToTable("PostReference");

                            b1.WithOwner()
                                .HasForeignKey("BlogId");
                        });

                    b.OwnsOne("DblDip.Core.ValueObjects.Email", "AuthorEmail", b1 =>
                        {
                            b1.Property<Guid>("BlogId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("BlogId");

                            b1.ToTable("Blogs");

                            b1.WithOwner()
                                .HasForeignKey("BlogId");
                        });

                    b.Navigation("AuthorEmail");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("DblDip.Core.Models.Board", b =>
                {
                    b.OwnsOne("DblDip.Core.Models.BoardState", "State", b1 =>
                        {
                            b1.Property<Guid>("BoardId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("SortOrder")
                                .HasColumnType("int");

                            b1.HasKey("BoardId");

                            b1.ToTable("Boards");

                            b1.WithOwner()
                                .HasForeignKey("BoardId");

                            b1.OwnsMany("DblDip.Core.Models.TicketState", "TicketStates", b2 =>
                                {
                                    b2.Property<Guid>("BoardStateBoardId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .UseIdentityColumn();

                                    b2.Property<Guid>("StateId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("TicketId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("BoardStateBoardId", "Id");

                                    b2.ToTable("TicketState");

                                    b2.WithOwner()
                                        .HasForeignKey("BoardStateBoardId");
                                });

                            b1.Navigation("TicketStates");
                        });

                    b.Navigation("State");
                });

            modelBuilder.Entity("DblDip.Core.Models.Company", b =>
                {
                    b.OwnsOne("DblDip.Core.ValueObjects.Url", "Url", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.Navigation("Url");
                });

            modelBuilder.Entity("DblDip.Core.Models.Consultation", b =>
                {
                    b.OwnsOne("DblDip.Core.ValueObjects.DateRange", "Scheduled", b1 =>
                        {
                            b1.Property<Guid>("ConsultationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("datetime2");

                            b1.HasKey("ConsultationId");

                            b1.ToTable("Consultations");

                            b1.WithOwner()
                                .HasForeignKey("ConsultationId");
                        });

                    b.OwnsOne("DblDip.Core.ValueObjects.Email", "ConsultantEmail", b1 =>
                        {
                            b1.Property<Guid>("ConsultationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ConsultationId");

                            b1.ToTable("Consultations");

                            b1.WithOwner()
                                .HasForeignKey("ConsultationId");
                        });

                    b.OwnsOne("DblDip.Core.ValueObjects.Email", "RecipientEmail", b1 =>
                        {
                            b1.Property<Guid>("ConsultationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ConsultationId");

                            b1.ToTable("Consultations");

                            b1.WithOwner()
                                .HasForeignKey("ConsultationId");
                        });

                    b.Navigation("ConsultantEmail");

                    b.Navigation("RecipientEmail");

                    b.Navigation("Scheduled");
                });

            modelBuilder.Entity("DblDip.Core.Models.Dashboard", b =>
                {
                    b.OwnsMany("DblDip.Core.Models.DashboardCard", "DashboardCards", b1 =>
                        {
                            b1.Property<Guid>("DashboardId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("DashboardCardId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Options")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DashboardId", "DashboardCardId");

                            b1.ToTable("DashboardCard");

                            b1.WithOwner()
                                .HasForeignKey("DashboardId");
                        });

                    b.Navigation("DashboardCards");
                });

            modelBuilder.Entity("DblDip.Core.Models.Epic", b =>
                {
                    b.OwnsMany("DblDip.Core.Models.TicketReference", "TicketReferences", b1 =>
                        {
                            b1.Property<Guid>("EpicId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("EpicId", "Id");

                            b1.ToTable("TicketReference");

                            b1.WithOwner()
                                .HasForeignKey("EpicId");
                        });

                    b.Navigation("TicketReferences");
                });

            modelBuilder.Entity("DblDip.Core.Models.Equipment", b =>
                {
                    b.OwnsOne("DblDip.Core.ValueObjects.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("EquipmentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("EquipmentId");

                            b1.ToTable("Equipment");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentId");
                        });

                    b.Navigation("Price");
                });

            modelBuilder.Entity("DblDip.Core.Models.Feedback", b =>
                {
                    b.OwnsOne("DblDip.Core.ValueObjects.Email", "RespondentEmail", b1 =>
                        {
                            b1.Property<Guid>("FeedbackId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("FeedbackId");

                            b1.ToTable("Feedbacks");

                            b1.WithOwner()
                                .HasForeignKey("FeedbackId");
                        });

                    b.Navigation("RespondentEmail");
                });

            modelBuilder.Entity("DblDip.Core.Models.Library", b =>
                {
                    b.OwnsMany("DblDip.Core.Models.DigitalAssetReference", "MyFiles", b1 =>
                        {
                            b1.Property<Guid>("LibraryId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<Guid>("DigitalAssetId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("LibraryId", "Id");

                            b1.ToTable("Libraries_MyFiles");

                            b1.WithOwner()
                                .HasForeignKey("LibraryId");
                        });

                    b.OwnsMany("DblDip.Core.Models.DigitalAssetReference", "MyImages", b1 =>
                        {
                            b1.Property<Guid>("LibraryId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<Guid>("DigitalAssetId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("LibraryId", "Id");

                            b1.ToTable("Libraries_MyImages");

                            b1.WithOwner()
                                .HasForeignKey("LibraryId");
                        });

                    b.Navigation("MyFiles");

                    b.Navigation("MyImages");
                });

            modelBuilder.Entity("DblDip.Core.Models.Meeting", b =>
                {
                    b.OwnsOne("DblDip.Core.ValueObjects.DateRange", "Scheduled", b1 =>
                        {
                            b1.Property<Guid>("MeetingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("datetime2");

                            b1.HasKey("MeetingId");

                            b1.ToTable("Meetings");

                            b1.WithOwner()
                                .HasForeignKey("MeetingId");
                        });

                    b.Navigation("Scheduled");
                });

            modelBuilder.Entity("DblDip.Core.Models.Order", b =>
                {
                    b.OwnsOne("DblDip.Core.ValueObjects.Email", "BillToEmail", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsMany("DblDip.Core.ValueObjects.LineItem", "LineItems", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<string>("Description")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderId", "Id");

                            b1.ToTable("Orders_LineItems");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");

                            b1.OwnsOne("DblDip.Core.ValueObjects.Price", "Amount", b2 =>
                                {
                                    b2.Property<Guid>("LineItemOrderId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("LineItemId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .UseIdentityColumn();

                                    b2.Property<decimal>("Value")
                                        .HasColumnType("decimal(18,2)");

                                    b2.HasKey("LineItemOrderId", "LineItemId");

                                    b2.ToTable("Orders_LineItems");

                                    b2.WithOwner()
                                        .HasForeignKey("LineItemOrderId", "LineItemId");
                                });

                            b1.Navigation("Amount");
                        });

                    b.OwnsOne("DblDip.Core.ValueObjects.Price", "Total", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("BillToEmail");

                    b.Navigation("LineItems");

                    b.Navigation("Total");
                });

            modelBuilder.Entity("DblDip.Core.Models.PhotoGallery", b =>
                {
                    b.OwnsMany("DblDip.Core.Models.Photo", "Photos", b1 =>
                        {
                            b1.Property<Guid>("PhotoGalleryId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<DateTime>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<Guid>("DigitalAssetId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhotoGalleryId", "Id");

                            b1.ToTable("Photos");

                            b1.WithOwner()
                                .HasForeignKey("PhotoGalleryId");
                        });

                    b.Navigation("Photos");
                });

            modelBuilder.Entity("DblDip.Core.Models.PhotoStudio", b =>
                {
                    b.OwnsOne("DblDip.Core.ValueObjects.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("PhotoStudioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Province")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhotoStudioId");

                            b1.ToTable("PhotoStudios");

                            b1.WithOwner()
                                .HasForeignKey("PhotoStudioId");
                        });

                    b.Navigation("Location");
                });

            modelBuilder.Entity("DblDip.Core.Models.Profile", b =>
                {
                    b.OwnsOne("DblDip.Core.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProfileId");

                            b1.ToTable("Profiles");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.OwnsOne("DblDip.Core.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProfileId");

                            b1.ToTable("Profiles");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.Navigation("Email");

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("DblDip.Core.Models.Quote", b =>
                {
                    b.OwnsOne("DblDip.Core.ValueObjects.Email", "BillToEmail", b1 =>
                        {
                            b1.Property<Guid>("QuoteId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("QuoteId");

                            b1.ToTable("Quotes");

                            b1.WithOwner()
                                .HasForeignKey("QuoteId");
                        });

                    b.OwnsMany("DblDip.Core.ValueObjects.LineItem", "LineItems", b1 =>
                        {
                            b1.Property<Guid>("QuoteId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<string>("Description")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("QuoteId", "Id");

                            b1.ToTable("Quotes_LineItems");

                            b1.WithOwner()
                                .HasForeignKey("QuoteId");

                            b1.OwnsOne("DblDip.Core.ValueObjects.Price", "Amount", b2 =>
                                {
                                    b2.Property<Guid>("LineItemQuoteId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("LineItemId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .UseIdentityColumn();

                                    b2.Property<decimal>("Value")
                                        .HasColumnType("decimal(18,2)");

                                    b2.HasKey("LineItemQuoteId", "LineItemId");

                                    b2.ToTable("Quotes_LineItems");

                                    b2.WithOwner()
                                        .HasForeignKey("LineItemQuoteId", "LineItemId");
                                });

                            b1.Navigation("Amount");
                        });

                    b.Navigation("BillToEmail");

                    b.Navigation("LineItems");
                });

            modelBuilder.Entity("DblDip.Core.Models.Rate", b =>
                {
                    b.OwnsOne("DblDip.Core.ValueObjects.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("RateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("RateId");

                            b1.ToTable("Rates");

                            b1.WithOwner()
                                .HasForeignKey("RateId");
                        });

                    b.Navigation("Price");
                });

            modelBuilder.Entity("DblDip.Core.Models.Role", b =>
                {
                    b.OwnsMany("DblDip.Core.Models.Privilege", "Privileges", b1 =>
                        {
                            b1.Property<Guid>("RoleId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<int>("AccessRight")
                                .HasColumnType("int");

                            b1.Property<string>("Aggregate")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("RoleId", "Id");

                            b1.ToTable("Privileges");

                            b1.WithOwner()
                                .HasForeignKey("RoleId");
                        });

                    b.Navigation("Privileges");
                });

            modelBuilder.Entity("DblDip.Core.Models.ShotList", b =>
                {
                    b.OwnsMany("DblDip.Core.Models.Shot", "Shots", b1 =>
                        {
                            b1.Property<Guid>("ShotListId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<string>("Description")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ShotListId", "Id");

                            b1.ToTable("Shots");

                            b1.WithOwner()
                                .HasForeignKey("ShotListId");
                        });

                    b.Navigation("Shots");
                });

            modelBuilder.Entity("DblDip.Core.Models.Story", b =>
                {
                    b.OwnsOne("DblDip.Core.ValueObjects.StoryPoints", "ArchitectureStoryPoints", b1 =>
                        {
                            b1.Property<Guid>("StoryId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int");

                            b1.HasKey("StoryId");

                            b1.ToTable("Stories");

                            b1.WithOwner()
                                .HasForeignKey("StoryId");
                        });

                    b.OwnsOne("DblDip.Core.ValueObjects.StoryPoints", "StoryPoints", b1 =>
                        {
                            b1.Property<Guid>("StoryId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int");

                            b1.HasKey("StoryId");

                            b1.ToTable("Stories");

                            b1.WithOwner()
                                .HasForeignKey("StoryId");
                        });

                    b.Navigation("ArchitectureStoryPoints");

                    b.Navigation("StoryPoints");
                });

            modelBuilder.Entity("DblDip.Core.Models.Survey", b =>
                {
                    b.OwnsMany("DblDip.Core.Models.SurveyQuestion", "SurveyQuestions", b1 =>
                        {
                            b1.Property<Guid>("SurveyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<Guid>("QuestionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SurveyId", "Id");

                            b1.ToTable("SurveyQuestions");

                            b1.WithOwner()
                                .HasForeignKey("SurveyId");
                        });

                    b.OwnsMany("DblDip.Core.Models.SurveyResult", "SurveyResults", b1 =>
                        {
                            b1.Property<Guid>("SurveyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("SurveyResultId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("SurveyId", "SurveyResultId");

                            b1.ToTable("SurveyResults");

                            b1.WithOwner()
                                .HasForeignKey("SurveyId");

                            b1.OwnsMany("DblDip.Core.Models.Answer", "Answers", b2 =>
                                {
                                    b2.Property<Guid>("SurveyResultSurveyId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("SurveyResultId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .UseIdentityColumn();

                                    b2.Property<Guid>("QuestionId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Value")
                                        .HasColumnType("int");

                                    b2.HasKey("SurveyResultSurveyId", "SurveyResultId", "Id");

                                    b2.ToTable("Answer");

                                    b2.WithOwner()
                                        .HasForeignKey("SurveyResultSurveyId", "SurveyResultId");
                                });

                            b1.OwnsOne("DblDip.Core.ValueObjects.Email", "RespondentEmail", b2 =>
                                {
                                    b2.Property<Guid>("SurveyResultSurveyId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("SurveyResultId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SurveyResultSurveyId", "SurveyResultId");

                                    b2.ToTable("SurveyResults");

                                    b2.WithOwner()
                                        .HasForeignKey("SurveyResultSurveyId", "SurveyResultId");
                                });

                            b1.Navigation("Answers");

                            b1.Navigation("RespondentEmail");
                        });

                    b.Navigation("SurveyQuestions");

                    b.Navigation("SurveyResults");
                });

            modelBuilder.Entity("DblDip.Core.Models.SystemLocation", b =>
                {
                    b.OwnsOne("DblDip.Core.ValueObjects.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("SystemLocationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Province")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SystemLocationId");

                            b1.ToTable("SystemLocations");

                            b1.WithOwner()
                                .HasForeignKey("SystemLocationId");
                        });

                    b.Navigation("Location");
                });

            modelBuilder.Entity("DblDip.Core.Models.Task", b =>
                {
                    b.OwnsOne("DblDip.Core.ValueObjects.DateRange", "Scheduled", b1 =>
                        {
                            b1.Property<Guid>("TaskId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("datetime2");

                            b1.HasKey("TaskId");

                            b1.ToTable("Tasks");

                            b1.WithOwner()
                                .HasForeignKey("TaskId");
                        });

                    b.Navigation("Scheduled");
                });

            modelBuilder.Entity("DblDip.Core.Models.Ticket", b =>
                {
                    b.OwnsMany("DblDip.Core.ValueObjects.Comment", "Coments", b1 =>
                        {
                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<string>("Body")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TicketId", "Id");

                            b1.ToTable("Comment");

                            b1.WithOwner()
                                .HasForeignKey("TicketId");

                            b1.OwnsOne("DblDip.Core.ValueObjects.Email", "AuthorEmail", b2 =>
                                {
                                    b2.Property<Guid>("CommentTicketId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("CommentId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .UseIdentityColumn();

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("CommentTicketId", "CommentId");

                                    b2.ToTable("Comment");

                                    b2.WithOwner()
                                        .HasForeignKey("CommentTicketId", "CommentId");
                                });

                            b1.Navigation("AuthorEmail");
                        });

                    b.Navigation("Coments");
                });

            modelBuilder.Entity("DblDip.Core.Models.User", b =>
                {
                    b.OwnsMany("DblDip.Core.Models.RoleReference", "Roles", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<Guid>("RoleId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("UserId", "Id");

                            b1.ToTable("RoleReference");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("DblDip.Core.Models.Venue", b =>
                {
                    b.OwnsOne("DblDip.Core.ValueObjects.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("VenueId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Province")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("VenueId");

                            b1.ToTable("Venues");

                            b1.WithOwner()
                                .HasForeignKey("VenueId");
                        });

                    b.Navigation("Location");
                });

            modelBuilder.Entity("DblDip.Core.Models.Wedding", b =>
                {
                    b.OwnsMany("DblDip.Core.Models.Trip", "Trips", b1 =>
                        {
                            b1.Property<Guid>("WeddingPhotographyProjectId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.HasKey("WeddingPhotographyProjectId", "Id");

                            b1.ToTable("Trip");

                            b1.WithOwner()
                                .HasForeignKey("WeddingPhotographyProjectId");

                            b1.OwnsOne("DblDip.Core.ValueObjects.DateRange", "Scheduled", b2 =>
                                {
                                    b2.Property<Guid>("TripWeddingPhotographyProjectId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("TripId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .UseIdentityColumn();

                                    b2.Property<DateTime>("EndDate")
                                        .HasColumnType("datetime2");

                                    b2.Property<DateTime>("StartDate")
                                        .HasColumnType("datetime2");

                                    b2.HasKey("TripWeddingPhotographyProjectId", "TripId");

                                    b2.ToTable("Trip");

                                    b2.WithOwner()
                                        .HasForeignKey("TripWeddingPhotographyProjectId", "TripId");
                                });

                            b1.OwnsOne("DblDip.Core.ValueObjects.Location", "End", b2 =>
                                {
                                    b2.Property<Guid>("TripWeddingPhotographyProjectId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("TripId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .UseIdentityColumn();

                                    b2.Property<string>("City")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<double>("Latitude")
                                        .HasColumnType("float");

                                    b2.Property<double>("Longitude")
                                        .HasColumnType("float");

                                    b2.Property<string>("PostalCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Province")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Street")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("TripWeddingPhotographyProjectId", "TripId");

                                    b2.ToTable("Trip");

                                    b2.WithOwner()
                                        .HasForeignKey("TripWeddingPhotographyProjectId", "TripId");
                                });

                            b1.OwnsOne("DblDip.Core.ValueObjects.Location", "Start", b2 =>
                                {
                                    b2.Property<Guid>("TripWeddingPhotographyProjectId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("TripId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .UseIdentityColumn();

                                    b2.Property<string>("City")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<double>("Latitude")
                                        .HasColumnType("float");

                                    b2.Property<double>("Longitude")
                                        .HasColumnType("float");

                                    b2.Property<string>("PostalCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Province")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Street")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("TripWeddingPhotographyProjectId", "TripId");

                                    b2.ToTable("Trip");

                                    b2.WithOwner()
                                        .HasForeignKey("TripWeddingPhotographyProjectId", "TripId");
                                });

                            b1.Navigation("End");

                            b1.Navigation("Scheduled");

                            b1.Navigation("Start");
                        });

                    b.OwnsMany("DblDip.Core.Models.WeddingPart", "Parts", b1 =>
                        {
                            b1.Property<Guid>("WeddingPhotographyProjectId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<string>("Description")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WeddingPhotographyProjectId", "Id");

                            b1.ToTable("WeddingPart");

                            b1.WithOwner()
                                .HasForeignKey("WeddingPhotographyProjectId");

                            b1.OwnsOne("DblDip.Core.ValueObjects.DateRange", "Scheduled", b2 =>
                                {
                                    b2.Property<Guid>("WeddingPartWeddingPhotographyProjectId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("WeddingPartId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .UseIdentityColumn();

                                    b2.Property<DateTime>("EndDate")
                                        .HasColumnType("datetime2");

                                    b2.Property<DateTime>("StartDate")
                                        .HasColumnType("datetime2");

                                    b2.HasKey("WeddingPartWeddingPhotographyProjectId", "WeddingPartId");

                                    b2.ToTable("WeddingPart");

                                    b2.WithOwner()
                                        .HasForeignKey("WeddingPartWeddingPhotographyProjectId", "WeddingPartId");
                                });

                            b1.OwnsOne("DblDip.Core.ValueObjects.Location", "Location", b2 =>
                                {
                                    b2.Property<Guid>("WeddingPartWeddingPhotographyProjectId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("WeddingPartId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .UseIdentityColumn();

                                    b2.Property<string>("City")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<double>("Latitude")
                                        .HasColumnType("float");

                                    b2.Property<double>("Longitude")
                                        .HasColumnType("float");

                                    b2.Property<string>("PostalCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Province")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Street")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("WeddingPartWeddingPhotographyProjectId", "WeddingPartId");

                                    b2.ToTable("WeddingPart");

                                    b2.WithOwner()
                                        .HasForeignKey("WeddingPartWeddingPhotographyProjectId", "WeddingPartId");
                                });

                            b1.Navigation("Location");

                            b1.Navigation("Scheduled");
                        });

                    b.OwnsOne("DblDip.Core.ValueObjects.Location", "EndLocation", b1 =>
                        {
                            b1.Property<Guid>("WeddingPhotographyProjectId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Province")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WeddingPhotographyProjectId");

                            b1.ToTable("PhotographyProjects");

                            b1.WithOwner()
                                .HasForeignKey("WeddingPhotographyProjectId");
                        });

                    b.OwnsOne("DblDip.Core.ValueObjects.Location", "StartLocation", b1 =>
                        {
                            b1.Property<Guid>("WeddingPhotographyProjectId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Province")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WeddingPhotographyProjectId");

                            b1.ToTable("PhotographyProjects");

                            b1.WithOwner()
                                .HasForeignKey("WeddingPhotographyProjectId");
                        });

                    b.Navigation("EndLocation");

                    b.Navigation("Parts");

                    b.Navigation("StartLocation");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("DblDip.Core.Models.Photographer", b =>
                {
                    b.OwnsMany("DblDip.Core.Models.ServiceReference", "Services", b1 =>
                        {
                            b1.Property<Guid>("PhotographerProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<Guid>("ServiceId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("PhotographerProfileId", "Id");

                            b1.ToTable("ServiceReference");

                            b1.WithOwner()
                                .HasForeignKey("PhotographerProfileId");
                        });

                    b.OwnsOne("DblDip.Core.ValueObjects.Location", "PrimaryLocation", b1 =>
                        {
                            b1.Property<Guid>("PhotographerProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Province")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhotographerProfileId");

                            b1.ToTable("Profiles");

                            b1.WithOwner()
                                .HasForeignKey("PhotographerProfileId");
                        });

                    b.Navigation("PrimaryLocation");

                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
